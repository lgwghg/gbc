<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans  
    					   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    				       http://www.springframework.org/schema/util
						   http://www.springframework.org/schema/util/spring-util-4.0.xsd
						   http://www.springframework.org/schema/context  
           				   http://www.springframework.org/schema/context/spring-context-4.1.xsd "
	   default-lazy-init="false">
	
	<!-- 加载参数  ignore-resource-not-found="true" -->
	<context:property-placeholder location="classpath:shiro.properties" ignore-unresolvable="true"/>
	
	<!-- redis 凭证匹配器 -->
	<bean id="redisCredentialsMatcher" class="com.webside.oauth.client.shiro.cache.redis.RedisLimitHashedMatcher">
		<property name="cache" ref="redisCache"/>
		<property name="hashAlgorithmName" value="MD5" />
		<property name="hashIterations" value="${shiro.hashIterations}" />
		<!-- 是否存储散列后的密码为16进,制这里需要和注册时使用的加密方式一样，都使用MD5加密，然后转为base64,密码匹配也需和注册时的加密方式一致 -->
		<property name="storedCredentialsHexEncoded" value="false" />
	</bean>
	
	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.webside.oauth.client.shiro.support.Realm">
		<property name="credentialsMatcher" ref="redisCredentialsMatcher" />
		<!-- 开启缓存 -->
		<property name="cachingEnabled" value="true" />
		<!-- 认证信息:这里不进行缓存 -->
		<property name="authenticationCachingEnabled" value="false" />
		<!-- 授权信息 -->
		<property name="authorizationCachingEnabled" value="true" />
		
		<property name="clients" ref="clients" />
	</bean>
	
    <!--  记住我功能，当关闭浏览器下次再访问的时候不需要登录也能查看。只对filterChainDefinitions设置为user级别的链接有效，
                                   类似于淘宝看商品、添加购物车，不需要验证是否登录。但是提交订单就必须登录。-->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="2592000"/><!-- 30天 -->
	</bean>
		
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie"/>
           <!-- aes key。shiro默认的key是不安全的,可以使用工程utils包的GenerateAESKey生成一个自定义的key-->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('XgGkgqGqYrix9lI6vxcrRw==')}"/>
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="shiroSessionManager" />
		<!-- 使用下面配置的缓存管理器 -->
		<property name="cacheManager" ref="redisCacheManager"/>
		<!-- 客户端勾选记住 -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
		<!-- sessionMode参数设置为native时，那么shrio就将用户的基本认证信息保存到缺省名称为shiro-activeSessionCache 
			的Cache中 -->
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native" /> -->
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
   <!--  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean> -->

	<!-- 用户登录数控制,超过最大回话数会强制退出 -->
	<bean id="kickoutSessionFilter" class="com.webside.shiro.filter.KickoutSessionFilter">
		<property name="cacheManager" ref="redisCacheManager" />
		<property name="sessionManager" ref="shiroSessionManager" />
		<property name="kickoutAfter" value="false" />
		<property name="maxSession" value="1" />
		<property name="kickoutUrl" value="/login" />
	</bean>
	
	<!-- 配置shiro的过滤器工厂类，这里bean的id shiroFilter要和我们在web.xml中配置的shior过滤器名称一致<filter-name>shiroFilter</filter-name> -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shiro的核心安全接口 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接 -->
		<property name="loginUrl" value="/login" />
		<!-- 登陆成功后要跳转的连接 -->
		<property name="successUrl" value="/match" />
		<!-- 未授权时要跳转的连接 -->
		<property name="unauthorizedUrl" value="/denied.jsp" />
		
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合你的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<!-- 这里不使用自定义filterChainDefinitionMap -->
		<!-- <property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" /> -->
		<!-- 动态加载权限 -->
		<!-- <property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/> -->
		<!-- 这里暂时静态加载方式 -->
		<!-- 不需要登陆访问,但需要跳转登录前请求的情使用 user 标签-->
		<property name="filterChainDefinitions">
			<value>
				/ = anon
				/index = anon
				/login = anon
				/resources/** = anon
				/upload/** = anon
				/register = anon
				/captcha/** = anon
				/denied.jsp = anon
				/*/view/error/*.jsp = anon
				/dict/** = anon
				/logout = anon
				/fp/** = anon
				/**/withoutAuth/** = anon
				/**/nl/** = anon						<!-- 不需要登录的请求加个nl  no login 的意思 哈哈-->
				/steam/bind = anon
				/bind/register = anon
				/bind/login = anon
				/province = anon
				/city/** = anon
				/area/** = anon
				/help/** = anon
				/profitRateTopList = anon			<!-- 首页胜率TOP列表不需要登录 -->
				/profitTopList = anon				<!-- 首页胜率TOP列表不需要登录 -->
				/comment/list = anon 				<!-- 评论列表不需要登录 -->
				/game/indexGamelist = anon			<!-- 首页游戏列表不需要登录 -->
				/gameEvent/gbGameEventlist = anon	<!-- 比赛列表页面赛事列表不需要登录 -->
				/userJc/getThisUserJc = anon		<!-- 比赛列表页面用户竞猜不需要登录 -->
				/userJc/gbUserJcList = anon			<!-- 比赛列表页面用户竞猜列表不需要登录 -->
				/pay/alipay/notify_web = anon		<!-- 支付宝回调不需要登录 -->
				/pay/wechatpay/notify_web = anon		<!-- 微信回调不需要登录 -->
				/share/** = anon
				/authorize/** = client		<!-- 第三方登录 -->
				/match = user				<!-- 比赛列表页面 -->
				/match/** = user			<!-- 比赛列表页面 -->
				/gb/** = user				<!-- 比赛列表页面 -->
				/shoppingMall = user		<!-- 商城不需要登录 -->
				/shopping/** = user			<!-- 商城不需要登录 -->
				/my/** = authc 				<!-- 个人中心需要登录 -->
				/comment/add = authc 		<!-- 发布评论需要登录 -->
				/coinflip/u/** = authc
				/coinflip/** = anon
				/** = authc					<!-- 其他请求 -->
			</value>
		</property>
		<!-- 自定义过滤器 -->
		<property name="filters">
			<util:map>
				<!-- 
				<entry key="sysUser" value-ref="sysUserFilter" />
				 -->
				<entry key="authc">
                    <bean class="com.webside.shiro.filter.LoginFilter" />
                </entry>
                <entry key="user">
                    <bean class="com.webside.shiro.filter.UserFilter" />
                </entry>
                <entry key="client" value-ref="clientFilter" />  <!-- 第三方登录 -->
				<entry key="kickout" value-ref="kickoutSessionFilter" />
			</util:map>
		</property>
	</bean>
	
	<!-- 用户登录数控制,超过最大回话数会强制退出 -->
	<bean id="clientFilter" class="com.webside.oauth.client.shiro.support.ClientFilter">
		<property name="failureUrl" value="/denied.jsp" />
		<property name="successUrl" value="/match" />
		<property name="clients" ref="clients" />
	</bean>
	
	<bean id="clients" class="org.pac4j.core.client.Clients">
		<property name="clients">  
            <list>  
               	<bean class="com.webside.oauth.client.client.QqClient" />
               	<bean class="com.webside.oauth.client.client.SinaWeiboClient" />  
               	<bean class="com.webside.oauth.client.client.WeiXinClient" />
               	<ref bean="steamOpenIdClient"/>
            </list>  
        </property>  
	</bean>
	<bean class="com.webside.openid.client.SteamOpenIdClient" id="steamOpenIdClient">
          <property name="callbackUrl" value="${steam.callback}"></property>
    </bean>
	<!--自定义filterChainDefinitionMap -->
	<bean id="chainDefinitionSectionMetaSource" class="com.webside.shiro.ChainDefinitionSectionMetaSource">
		<property name="filterChainDefinitions">
			<value>
				/resources/** = anon
				/login = authc
				<!-- /logout = logout --><!-- lwh:暂时去掉 -->
				/register = anon
				/captcha.html = anon
				/denied.jsp = anon
				/view/error/** = anon
				/*/withoutAuth/** = anon
			</value>
		</property>
	</bean>

	<!-- 会话DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>
	
	<bean id="rediSessionDAO" class="com.webside.shiro.session.ShiroSessionDao">
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
		<property name="cache" ref="redisCache"></property>
		<property name="expire" value="1800"></property>
	</bean>
	
	<!-- 会话验证调度器 -->
	<!-- 全局的会话信息检测扫描信息间隔60分钟 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="${shiro.session.validate.interval}" />
		<property name="sessionManager" ref="shiroSessionManager" />
	</bean>

	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name，修改cookie的名字 -->
	    <constructor-arg value="wodota_sid"/>
	    <property name="httpOnly" value="true"/>
	    <!--cookie的有效时间 -->
	    <property name="maxAge" value="-1"/>
	</bean>

	<!-- 会话管理器 -->
	<!-- 全局的会话信息设置成30分钟,sessionValidationSchedulerEnabled参数就是是否开启扫描 -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="sessionDAO" ref="rediSessionDAO" />
		<!-- session 有效时间为半小时 （毫秒单位）-->  
		<property name="globalSessionTimeout" value="${shiro.session.timeout}"/>
		<!-- 相隔多久检查一次session的有效性   -->
	 	<property name="sessionValidationInterval" value="${shiro.session.validate.interval}"/>
	 	<!-- 是否开启 检测，默认开启 --> 
	 	<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	   <!-- session 监听，可以多个。 -->
	   <property name="sessionListeners">
	       <list>
	           <!-- <ref bean="customSessionListener"/> -->
	       </list>
	   </property>
	</bean>
	
	<!-- 会话Session 监听-->
	<bean id="customSessionListener" class="com.webside.shiro.listenter.CustomSessionListener">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository" />
	</bean>
	
	<!--EH shiro缓存管理器 -->
	<bean id="shiroCacheManager" class="com.webside.shiro.ShiroCacheManagerWrapper">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	
	<!-- Shiro生命周期处理器-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"> <property name="proxyTargetClass" 
		value="true"></property> </bean> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager" /> </bean> -->
</beans>
